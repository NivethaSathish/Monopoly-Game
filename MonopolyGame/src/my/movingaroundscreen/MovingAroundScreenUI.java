/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.movingaroundscreen;

import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.PointerInfo;
import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author 073785628
 */
public class MovingAroundScreenUI extends javax.swing.JFrame {

    Graphics g;

//Possible x and y coordinates
    int xC[] = {546, 601, 601, 601, 601, 601, 601, 601, 601, 601, 544, 489, 446, 403, 361, 318, 276, 235, 192, 147, 92, 30, 30, 30, 30, 30, 30, 30, 30, 30, 91, 148, 192, 233, 277, 319, 361, 405, 445, 489};
    int yC[] = {599, 489, 447, 405, 361, 317, 275, 233, 191, 147, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 150, 189, 233, 274, 318, 361, 404, 445, 489, 599, 599, 599, 599, 599, 599, 599, 599, 599, 599};

//Property Information
    String[] property = {"Go", "Boardwalk", "Luxury Tax", "Park Place", "Chance", "Short Line", "Pennsylvania Avenue", "Community Chest", "North Carolina", "Pacific Avenue", "Jail", "Marvin Gardens", "Water Works", "Ventnor Avenue", "Atlantic Avenue", "B & O Railroad", "Illinois Avenue", "Indiana Avenue", "Chance", "Kentucky Avenue", "Free Parking", "New York Avenue", "Tennessee Avenue", "Community Chest", "St.James Place", "Pennsylvania Railroad", "Virginia Avenue", "States Avenue", "Electric Company", "St.Charles Place", "Jail", "Connecticut Avenue", "Vermont Avenue", "Chance", "Oriental Avenue", "Reading Railroad", "Income Tax", "Baltic Avenue", "Community Chest", "Mediterranean Avenue"};
    int[] price = {0, 400, 100, 350, 0, 200, 320, 0, 300, 300, 0, 280, 150, 260, 260, 200, 240, 220, 0, 220, 0, 200, 180, 0, 180, 200, 160, 140, 150, 140, 0, 120, 100, 0, 100, 200, 200, 60, 0, 60};
    int[] rent = {0, 50, 0, 35, 0, 25, 28, 0, 26, 26, 0, 24, 25, 22, 22, 25, 20, 18, 0, 18, 0, 16, 14, 0, 14, 25, 12, 10, 25, 10, 0, 8, 6, 0, 6, 25, 0, 4, 0, 2};

//Community Chest and Chance Possibilities
    String[] comChest = {"Bank Error", "Doctor's Fees", "Sale of Stock", "Holiday Fund Matures", "Income Tax Refund"};//community chest card options
    int chestNum = 0;
    String[] chance = {"Elected Chairman of the Board", "Poor Tax", "Back Three Spaces", "Bank Pays Dividend", "Building and Loan Matures"};//chance card options
    int chanceNum = 0;

    int count = 0;
    int diceNum = 0;
    int numPlayers;

//Variables that need to be updated for a new game
    int curPos1 = 0;
    int curPos2 = 0;
    int curPos3 = 0;
    int curPos4 = 0;
//If owner is 0, no one owns it, if owner is 1, player 1 owns it, if owner is 2, player 2 owns it, etc.
    int[] owner = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    int[] money = {1500, 1500, 1500, 1500};

//Start with player 1's turn, during each turn, each variable will be updated so that next time, the next player will be able to go
    int playTurn = 1;
    int eraseTurn = 1;
    int diceTurn = 1;
    int numTurn = 1;

    /**
     * Creates new form MovingAroundScreenUI
     */
    public MovingAroundScreenUI() {

        initComponents();
        hideAtBeginning();//buttons and labels that need to be hidden at the beginning of the game (i.e. Congratulations! Would you like to play again?)

        g = jPanel2.getGraphics();
        jLabel4.setText("Player 1: " + String.valueOf(money[0]));
        jLabel5.setText("Player 2: " + String.valueOf(money[1]));
        jLabel6.setText("Player 3: " + String.valueOf(money[2]));
        jLabel7.setText("Player 4: " + String.valueOf(money[3]));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Monopoly Board Image.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Stencil", 0, 15)); // NOI18N
        jLabel3.setText("Players' Money: ");

        jLabel4.setText("Player 1:");

        jLabel5.setText("Player 2: ");

        jLabel6.setText("Player 3:");

        jLabel7.setText("Player 4:");

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 16)); // NOI18N
        jLabel8.setText("Welcome to Monopoly! How Many Players?");

        jButton1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jButton1.setText("Press to Take Turn");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("YES");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Cambria", 3, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N

        jButton3.setText("2 Players");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("3 Players");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("4 Players");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        jLabel11.setText("Congratulations! Would You Like to Play Again?");

        jButton6.setText("YES");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("NO");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/No Roll.png"))); // NOI18N

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/MonopolyMan2.png"))); // NOI18N
        jLabel15.setText("jLabel15");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton6)
                                .addGap(18, 18, 18)
                                .addComponent(jButton7))
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jButton1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                    .addComponent(jButton3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButton5)))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)))
                                .addGap(11, 11, 11)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jLabel13))
                .addGap(32, 32, 32)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(25, 25, 25))
        );

        jLabel21.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel21.setText("Boardwalk:");

        jLabel22.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel22.setText("Park Place:");

        jLabel23.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel23.setText("Short Line:");

        jLabel24.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel24.setText("Pennsylvania Avenue:");

        jLabel25.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel25.setText("North Carolina Avenue:");

        jLabel26.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel26.setText("Pacific Avenue:");

        jLabel27.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel27.setText("Marvin Gardens:");

        jLabel28.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel28.setText("Water Works:");

        jLabel29.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel29.setText("Ventnor Avenue:");

        jLabel30.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel30.setText("Atlantic Avenue:");

        jLabel31.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel31.setText("B & O Railroad:");

        jLabel32.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel32.setText("Illinois Avenue:");

        jLabel33.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel33.setText("Indiana Avenue:");

        jLabel34.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel34.setText("Kentucky Avenue:");

        jLabel35.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel35.setText("New York Avenue:");

        jLabel36.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel36.setText("Tennesse Avenue:");

        jLabel37.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel37.setText("St. James Place:");

        jLabel38.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel38.setText("Pennsylvania Railroad:");

        jLabel39.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel39.setText("Virginia Avenue:");

        jLabel40.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel40.setText("States Avenue:");

        jLabel41.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel41.setText("Electric Company");

        jLabel42.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel42.setText("St. Charles Place:");

        jLabel43.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel43.setText("Connecticut Avenue:");

        jLabel44.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel44.setText("Vermont Avenue:");

        jLabel45.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel45.setText("Oriental Avenue:");

        jLabel46.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel46.setText("Reading Railroad:");

        jLabel47.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel47.setText("Baltic Avenue:");

        jLabel48.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel48.setText("Mediterranean Avenue:");

        jLabel12.setFont(new java.awt.Font("Stencil", 0, 15)); // NOI18N
        jLabel12.setText("Properties and Owners");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel47, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel48, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel37)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel45)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel46)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel48)
                        .addGap(54, 54, 54))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        //NO
        //if players choose to not play another game
        System.exit(0);//exit the game
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        //YES
        //if players choose to play another game
        hideAtBeginning();

        g.setColor(Color.white);
        g.fillOval(xC[curPos1], yC[curPos1], 10, 10);//erase player 1
        g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10); //erase player 2
        g.fillOval(xC[curPos3], yC[curPos3] + 15, 10, 10);//erase player 3
        g.fillOval(xC[curPos4] + 5, yC[curPos4] + 10, 10, 10);//erase player 4
        jButton3.setVisible(true);
        jButton4.setVisible(true);
        jButton5.setVisible(true);

        //Things that need to be updated for a new game
        curPos1 = 0;
        curPos2 = 0;
        curPos3 = 0;
        curPos4 = 0;

        //Reset owner and money arrays
        for (int c = 0; c <= 39; c++) {
            owner[c] = 0;
        }
        for (int cc = 0; cc <= 3; cc++) {
            money[cc] = 1500;
        }

        //Now it is player 1's turn
        playTurn = 1;
        eraseTurn = 1;
        diceTurn = 1;
        numTurn = 1;
        jLabel8.setText("Welcome to Monopoly! How Many Players?");
        list();//print properties and owners

    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //If players choose to play with four players

        numPlayers = 4;

        jButton3.setVisible(false);//hide two player button
        jButton4.setVisible(false);//hide three player button
        jButton1.setVisible(true);//display press to take turn button
        jLabel3.setVisible(true);//display "Players' Money"
        //DISPLAY MONEY LABELS (for four players)
        jLabel4.setVisible(true);
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        jLabel7.setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //if players choose to play with 3 players

        numPlayers = 3;

        jButton3.setVisible(false);//hide two player button
        jButton5.setVisible(false);//hide four player button
        jButton1.setVisible(true);//display press to take turn button
        jLabel3.setVisible(true);//display "Players' Money"
        //DISPLAY MONEY LABELS (for three players and hide fourth money label)
        jLabel4.setVisible(true);
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        jLabel7.setVisible(false);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //if players choose to play with 2 players

        numPlayers = 2;

        jButton4.setVisible(false);//hide three player button
        jButton5.setVisible(false);//hide four player button
        jButton1.setVisible(true);//display press to take turn button
        jLabel3.setVisible(true);//display "Players' Money"
        //DISPLAY MONEY LABELS (for two players and hide third and fourth money labels)
        jLabel4.setVisible(true);
        jLabel5.setVisible(true);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        //PURCHASING PROPERTIES
        if (numPlayers == 2) {
            if (numTurn % 2 == 0) {//Player 1's turn
                if (owner[curPos1] == 0) { //if the no one owns it, let the player buy it
                    if (money[0] >= price[curPos1]) { //if the player has enough money, let the player buy it
                        money[0] = money[0] - price[curPos1];
                        jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                        jLabel9.setText("Player 1 Now Owns " + property[curPos1]);
                        owner[curPos1] = 1;
                    } else { //if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 1, You Do Not Have Enough Money to Buy " + property[curPos1]);
                    }
                }
            }

            if (numTurn % 2 != 0) {//Player 2's turn
                if (owner[curPos2] == 0) { //if the no one owns it, let the player buy it
                    if (money[1] >= price[curPos2]) {//if the player has enough money, let the player buy it
                        money[1] = money[1] - price[curPos2];
                        jLabel5.setText("Player 2: " + String.valueOf(money[1]));
                        jLabel9.setText("Player 2 Now Owns " + property[curPos2]);
                        owner[curPos2] = 2;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 2, You Do Not Have Enough Money to Buy " + property[curPos2]);
                    }
                }
            }

        }

        if (numPlayers == 3) {

            if (playTurn == 2) {//Player 1's Turn
                if (owner[curPos1] == 0) { //if the no one owns it, let the player buy it
                    if (money[0] >= price[curPos1]) { //if the player has enough money, let the player buy it
                        money[0] = money[0] - price[curPos1];
                        jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                        jLabel9.setText("Player 1 Now Owns " + property[curPos1]);
                        owner[curPos1] = 1;
                    } else { //if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 1, You Do Not Have Enough Money to Buy " + property[curPos1]);
                    }
                }

            } else if (playTurn == 3) {//Player 2's Turn
                if (owner[curPos2] == 0) { //if the no one owns it, let the player buy it
                    if (money[1] >= price[curPos2]) {//if the player has enough money, let the player buy it
                        money[1] = money[1] - price[curPos2];
                        jLabel5.setText("Player 2: " + String.valueOf(money[1]));
                        jLabel9.setText("Player 2 Now Owns " + property[curPos2]);
                        owner[curPos2] = 2;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 2, You Do Not Have Enough Money to Buy " + property[curPos2]);
                    }
                }

            } else if (playTurn == 1) { //Player 3's Turn
                if (owner[curPos3] == 0) { //if the no one owns it, let the player buy it
                    if (money[2] >= price[curPos3]) {//if the player has enough money, let the player buy it
                        money[2] = money[2] - price[curPos3];
                        jLabel6.setText("Player 3: " + String.valueOf(money[2]));
                        jLabel9.setText("Player 3 Now Owns " + property[curPos3]);
                        owner[curPos3] = 3;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 3, You Do Not Have Enough Money to Buy " + property[curPos3]);
                    }
                }

            }
        }

        if (numPlayers == 4) {

            if (playTurn == 2) {//Player 1's Turn
                if (owner[curPos1] == 0) { //if the no one owns it, let the player buy it
                    if (money[0] >= price[curPos1]) { //if the player has enough money, let the player buy it
                        money[0] = money[0] - price[curPos1];
                        jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                        jLabel9.setText("Player 1 Now Owns " + property[curPos1]);
                        owner[curPos1] = 1;
                    } else { //if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 1, You Do Not Have Enough Money to Buy " + property[curPos1]);
                    }
                }

            } else if (playTurn == 3) {//Player 2's Turn
                if (owner[curPos2] == 0) { //if the no one owns it, let the player buy it
                    if (money[1] >= price[curPos2]) {//if the player has enough money, let the player buy it
                        money[1] = money[1] - price[curPos2];
                        jLabel5.setText("Player 2: " + String.valueOf(money[1]));
                        jLabel9.setText("Player 2 Now Owns " + property[curPos2]);
                        owner[curPos2] = 2;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 2, You Do Not Have Enough Money to Buy " + property[curPos2]);
                    }
                }

            } else if (playTurn == 4) {//Player 3's Turn
                if (owner[curPos3] == 0) { //if the no one owns it, let the player buy it
                    if (money[2] >= price[curPos3]) {//if the player has enough money, let the player buy it
                        money[2] = money[2] - price[curPos3];
                        jLabel5.setText("Player 3: " + String.valueOf(money[2]));
                        jLabel9.setText("Player 3 Now Owns " + property[curPos3]);
                        owner[curPos3] = 3;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 3, You Do Not Have Enough Money to Buy " + property[curPos3]);
                    }
                }

            } else if (playTurn == 1) { //Player 4's Turn
                if (owner[curPos4] == 0) { //if the no one owns it, let the player buy it
                    if (money[3] >= price[curPos4]) {//if the player has enough money, let the player buy it
                        money[3] = money[3] - price[curPos4];
                        jLabel7.setText("Player 4: " + String.valueOf(money[3]));
                        jLabel9.setText("Player 4 Now Owns " + property[curPos4]);
                        owner[curPos4] = 4;
                    } else {//if the player does not have enough money, don't let the player buy it
                        jLabel9.setText("Sorry Player 4, You Do Not Have Enough Money to Buy " + property[curPos4]);
                    }
                }

            }
        }

        list();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:g.setColor(Color.white);
        //January 17th

        jLabel2.setText(" ");

        while (count == 0) {

            jLabel10.setText(" ");
            g.setColor(Color.white);

            //CHANGE NUMBER OF PLAYERS ACCORDING TO PLAYER INPUT
            switch (numPlayers) {

                case 2://TWO PLAYERS
//TWO PLAYERS

                    if (numTurn % 2 != 0) {//if it's player 1's turn
                        g.fillOval(xC[curPos1], yC[curPos1], 10, 10);//erase player 1
                    } else if (numTurn % 2 == 0) {//if it's player 2's turn
                        g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10); //erase player 2
                    }

                    if (numTurn % 2 != 0) { //if it's player 1's turn

                        if (curPos1 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos1 = curPos1 + diceNum;

                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;
                            if ((curPos1 + diceNum) <= 39) {
                                curPos1 = curPos1 + diceNum;

                            } else if ((curPos1 + diceNum) > 39) {
                                curPos1 = curPos1 + diceNum - 40;
                                money[0] = money[0] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");

                            }
                        }

                        jLabel8.setText("Player 1 moves " + diceNum + " spaces.");
                        diceVisual();

                    } else if (numTurn % 2 == 0) { //if it's player 2's turn
                        if (curPos2 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos2 = curPos2 + diceNum;

                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos2 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos2 = curPos2 + diceNum;

                            } else if ((curPos2 + diceNum) > 39) {//if it's not and the position is greater
                                curPos2 = curPos2 + diceNum - 40;//convert it back
                                money[1] = money[1] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }

                        }
                        jLabel8.setText("Player 2 moves " + diceNum + " spaces.");
                        diceVisual();
                    }

                    //PLAYER 2'S TURN
                    if (numTurn % 2 == 0) {//if it's player 2's turn
                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos2].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[1] < 50) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt. Player 1, You Are the Winner.");
                                        endScreen();
                                    } else {
                                    money[1] = money[1] - 50;
                                    money[0] = money[0] + 50;
                                    }
                                    break;
                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[1] < 15) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt. Player 1, You Are the Winner.");
                                        endScreen();
                                    } else {
                                        money[1] = money[1] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos2 = curPos2 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[1] = money[1] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[1] = money[1] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[1] < 100) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt. Player 1, You Are the Winner.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 100;
                            }

                        } else if (property[curPos2].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[1] < 200) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt. Player 1, You Are the Winner.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 200;
                            }

                        } else if (property[curPos2].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerTwo();

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            switch (owner[curPos2]) {
                                case 1:
                                    //if the other player owns this, subtract rent
                                    jLabel9.setText("You Need to Pay a Rent of $" + rent[curPos2] + " to Player 1.");

                                    jButton2.setVisible(false);

                                    if (money[1] < rent[curPos2]) {//if player doesn't have enough to pay rent
                                        twoPaysOne();
                                        jLabel2.setText("Player 2, You Are Bankrupt. Player 1, You Are the Winner.");
                                        endScreen();

                                    } else {
                                        money[1] = money[1] - rent[curPos2];//player 2 pays rent
                                        money[0] = money[0] + rent[curPos2];//to player 1
                                    }

                                    break;

                                case 2:
                                    //if player 2 owns
                                    jLabel2.setText("You Own This");
                                    jButton2.setVisible(false);
                                    break;

                                case 0:
                                    //if no one owns, give option to buy
                                    jLabel2.setText("Would you like to buy " + property[curPos2] + " for $" + price[curPos2] + "?");
                                    jButton2.setVisible(true);
                                    break;
                                default:
                                    break;
                            }
                        }

                    } //PLAYER 1'S TURN
                    else {//if it's player 1's turn
                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos1].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");

                                    if (money[0] < 50) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt. Player 2, You Are the Winner.");
                                        endScreen();
                                    } else {
                                    money[0] = money[0] - 50;
                                    money[1] = money[1] + 50;
                                    }
                                    break;

                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");

                                    if (money[0] < 15) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt. Player 2, You Are the Winner.");
                                        endScreen();
                                    } else {
                                        money[0] = money[0] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos1 = curPos1 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[0] = money[0] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[0] = money[0] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[0] < 100) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt. Player 2, You Are the Winner.");
                                endScreen();

                            } else {
                                money[0] = money[0] - 100;
                            }

                        } else if (property[curPos1].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[0] < 200) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt. Player 2, You Are the Winner.");
                                endScreen();
                            } else {
                                money[0] = money[0] - 200;
                            }

                        } else if (property[curPos1].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerOne();

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Go")) {

                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {
                            switch (owner[curPos1]) {
                                case 2:
                                    //if the other player owns this, subtract rent
                                    jLabel9.setText("You Need to Pay a Rent of $" + rent[curPos1] + " to Player 2.");

                                    jButton2.setVisible(false);

                                    if (money[0] < rent[curPos1]) {//if player doesn't have enough to pay rent
                                        onePaysTwo();
                                        jLabel2.setText("Player 1, You Are Bankrupt. Player 2, You Are the Winner.");
                                        endScreen();

                                    } else {
                                        money[0] = money[0] - rent[curPos1];//player 1 pays rent
                                        money[1] = money[1] + rent[curPos1];//to player 2
                                    }
                                    break;

                                case 1:
                                    //if player 1 owns
                                    jLabel2.setText("You Own This");
                                    jButton2.setVisible(false);
                                    break;

                                case 0:
                                    //if no one owns, give option to buy
                                    jLabel2.setText("Would you like to buy " + property[curPos1] + " for $" + price[curPos1] + "?");
                                    jButton2.setVisible(true);
                                    break;
                                default:
                                    break;
                            }
                        }
                    }

                    //CHANGE MONEY DISPLAY
                    jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                    jLabel5.setText("Player 2: " + String.valueOf(money[1]));

                    //DRAW SPRITES
                    g.setColor(Color.blue); //draw player 1
                    g.fillOval(xC[curPos1], yC[curPos1], 10, 10);
                    g.setColor(Color.red); //draw player 2
                    g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10);

                    break;

                case 3: //THREE PLAYERS
//THREE PLAYERS
                    jLabel6.setVisible(true);//make player 3's money visible
                    jLabel7.setVisible(false);//player 4's money is not visible because there are only three players

                    //ERASETURN
                    if (eraseTurn == 1) {//if it's player 1's turn
                        g.fillOval(xC[curPos1], yC[curPos1], 10, 10);//erase player 1
                        eraseTurn = 2;

                    } else if (eraseTurn == 2) { //if it's player 2's turn
                        g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10); //erase player 2
                        eraseTurn = 3;

                    } else if (playTurn == 3) {//if it's player 3's turn
                        g.fillOval(xC[curPos3], yC[curPos3] + 15, 10, 10);//erase player 3
                        eraseTurn = 1;
                    }

                    //DICETURN
                    if (diceTurn == 2) { //if it's player 2's turn
                        if (curPos2 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos2 = curPos2 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos2 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos2 = curPos2 + diceNum;
                            } else if ((curPos2 + diceNum) > 39) {//if it's not and the position is greater
                                curPos2 = curPos2 + diceNum - 40;//convert it back
                                money[1] = money[1] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 3;
                        jLabel8.setText("Player 2 moves " + diceNum + " spaces.");
                        diceVisual();

                    } else if (diceTurn == 3) { // if it's player 3's turn
                        if (curPos3 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos3 = curPos3 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos3 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos3 = curPos3 + diceNum;
                            } else if ((curPos3 + diceNum) > 39) {//if it's not and the position is greater
                                curPos3 = curPos3 + diceNum - 40;//convert it back
                                money[2] = money[2] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 1;
                        jLabel8.setText("Player 3 moves " + diceNum + " spaces.");
                        diceVisual();

                    } else if (diceTurn == 1) {//if it's player 1's turn
                        if (curPos1 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos1 = curPos1 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;
                            if ((curPos1 + diceNum) <= 39) {
                                curPos1 = curPos1 + diceNum;
                            } else if ((curPos1 + diceNum) > 39) {
                                curPos1 = curPos1 + diceNum - 40;
                                money[0] = money[0] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 2;
                        jLabel8.setText("Player 1 moves " + diceNum + " spaces.");
                        diceVisual();
                    }

                    //PLAYER 1'S TURN
                    if (playTurn == 1) { //if it's Player 1's turn

                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos1].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");

                                    if (money[0] < 100) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[0] = money[0] - 100;
                                    money[1] = money[1] + 50;
                                    money[2] = money[2] + 50;
                                    }
                                    break;
                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");

                                    if (money[0] < 15) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[0] = money[0] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos1 = curPos1 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[0] = money[0] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[0] = money[0] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[0] < 100) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[0] = money[0] - 100;
                            }

                        } else if (property[curPos1].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[0] < 200) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[0] = money[0] - 200;
                            }

                        } else if (property[curPos1].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerOne();

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Go")) {

                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos1] == 2) {//if Player 2 owns this
                                onePaysTwo();

                            } else if (owner[curPos1] == 3) {//if Player 3 owns this
                                onePaysThree();

                            } else if (owner[curPos1] == 0) {
                                //if no one owns, give option to buy
                                jLabel2.setText("Would you like to buy " + property[curPos1] + " for $" + price[curPos1] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos1] == 1) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 2;//make it player 2's turn next time

                    } //PLAYER 2'S TURN
                    else if (playTurn == 2) {//if it's player 2's turn
                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos2].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[1] < 100) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[1] = money[1] - 100;
                                    money[0] = money[0] + 50;
                                    money[2] = money[2] + 50;
                                    }
                                    break;
                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[1] < 15) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[1] = money[1] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos2 = curPos2 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[1] = money[1] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[1] = money[1] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[1] < 100) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 100;
                            }

                        } else if (property[curPos2].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[1] < 200) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 200;
                            }

                        } else if (property[curPos2].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerTwo();

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos2] == 1) {//if Player 1 owns this
                                twoPaysOne();

                            } else if (owner[curPos2] == 3) {//if Player 3 owns this
                                twoPaysThree();

                            } else if (owner[curPos2] == 0) {
                                //if no one owns, give option to buy
                                jLabel2.setText("Would you like to buy " + property[curPos2] + " for $" + price[curPos2] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos2] == 2) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 3;//make it player 3's turn next time

                        //PLAYER 3'S TURN
                    } else if (playTurn == 3) {//if it's player 3's turn

                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos3].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[2] < 100) {
                                        money[2] = 0;
                                        jLabel2.setText("Player 3, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[2] = money[2] - 100;
                                    money[0] = money[0] + 50;
                                    money[1] = money[1] + 50;
                                    }
                                    break;

                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[2] < 15) {
                                        money[2] = 0;
                                        jLabel2.setText("Player 3, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[2] = money[2] - 15;
                                    }

                                    break;

                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos3 = curPos3 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[2] = money[2] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[2] = money[2] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[2] < 100) {
                                money[2] = 0;
                                jLabel2.setText("Player 3, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[2] = money[2] - 100;
                            }

                        } else if (property[curPos3].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[2] < 200) {
                                money[2] = 0;
                                jLabel2.setText("Player 3, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[2] = money[2] - 200;
                            }

                        } else if (property[curPos3].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerThree();

                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos3] == 1) {//if Player 1 owns this
                                threePaysOne();

                            } else if (owner[curPos3] == 2) { //if Player 2 owns this, subtract rent
                                threePaysTwo();

                            } else if (owner[curPos3] == 0) {//if no one owns, give option to buy

                                jLabel2.setText("Would you like to buy " + property[curPos3] + " for $" + price[curPos3] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos3] == 3) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 1;//make it player 1's turn next time
                    }

                    //CHANGE MONEY DISPLAY
                    jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                    jLabel5.setText("Player 2: " + String.valueOf(money[1]));
                    jLabel6.setText("Player 3: " + String.valueOf(money[2]));

                    //DRAW SPRITES
                    g.setColor(Color.blue); //draw player 1
                    g.fillOval(xC[curPos1], yC[curPos1], 10, 10);

                    g.setColor(Color.red); //draw player 2
                    g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10);

                    g.setColor(Color.green);//draw player 3
                    g.fillOval(xC[curPos3], yC[curPos3] + 15, 10, 10);

                    break;

                case 4: //FOUR PLAYERS
//FOUR PLAYERS
                    jLabel6.setVisible(true);
                    jLabel7.setVisible(true);//player 4's money is now visible

                    //ERASETURN
                    if (eraseTurn == 1) {//if it's player 1's turn
                        g.fillOval(xC[curPos1], yC[curPos1], 10, 10);//erase player 1
                        eraseTurn = 2;

                    } else if (eraseTurn == 2) { //if it's player 2's turn
                        g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10); //erase player 2
                        eraseTurn = 3;

                    } else if (playTurn == 3) {//if it's player 3's turn
                        g.fillOval(xC[curPos3], yC[curPos3] + 15, 10, 10);//erase player 3
                        eraseTurn = 4;
                    } else if (playTurn == 4) {//if it's player 4
                        g.fillOval(xC[curPos4] + 5, yC[curPos4] + 10, 10, 10);//erase player 4
                        eraseTurn = 1;
                    }

                    //DICETURN
                    if (diceTurn == 1) {//if it's player 1's turn
                        if (curPos1 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos1 = curPos1 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;
                            if ((curPos1 + diceNum) <= 39) {
                                curPos1 = curPos1 + diceNum;
                            } else if ((curPos1 + diceNum) > 39) {
                                curPos1 = curPos1 + diceNum - 40;
                                money[0] = money[0] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 2;
                        jLabel8.setText("Player 1 moves " + diceNum + " spaces.");
                        diceVisual();
                    } else if (diceTurn == 2) { //if it's player 2's turn
                        if (curPos2 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos2 = curPos2 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos2 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos2 = curPos2 + diceNum;
                            } else if ((curPos2 + diceNum) > 39) {//if it's not and the position is greater
                                curPos2 = curPos2 + diceNum - 40;//convert it back
                                money[1] = money[1] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 3;
                        jLabel8.setText("Player 2 moves " + diceNum + " spaces.");
                        diceVisual();
                    } else if (diceTurn == 3) { // if it's player 3's turn
                        if (curPos3 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos3 = curPos3 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos3 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos3 = curPos3 + diceNum;
                            } else if ((curPos3 + diceNum) > 39) {//if it's not and the position is greater
                                curPos3 = curPos3 + diceNum - 40;//convert it back
                                money[2] = money[2] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 4;
                        jLabel8.setText("Player 3 moves " + diceNum + " spaces.");
                        diceVisual();
                    } else if (diceTurn == 4) { // if it's player 3's turn
                        if (curPos4 <= 33) {
                            diceNum = (int) (Math.random() * 6) + 1;//generate random dice number
                            curPos4 = curPos4 + diceNum;
                        } else { //if curPos is not less than or equal to 33
                            diceNum = (int) (Math.random() * 6) + 1;//generate a random dice number
                            if ((curPos4 + diceNum) <= 39) {//if the diceNum added to curPos is less than or equal to 39, keep it
                                curPos4 = curPos4 + diceNum;
                            } else if ((curPos4 + diceNum) > 39) {//if it's not and the position is greater
                                curPos4 = curPos4 + diceNum - 40;//convert it back
                                money[3] = money[3] + 200;
                                jLabel10.setText("You Get $200 for Passing Go");
                            }
                        }
                        diceTurn = 1;
                        jLabel8.setText("Player 4 moves " + diceNum + " spaces.");
                        diceVisual();
                    }

                    //PLAYER 1'S TURN
                    if (playTurn == 1) { //if it's Player 1's turn

                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos1].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");

                                    if (money[0] < 150) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[0] = money[0] - 150;
                                    money[1] = money[1] + 50;
                                    money[2] = money[2] + 50;
                                    money[3] = money[3] + 50;
                                    }
                                    break;
                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");

                                    if (money[0] < 15) {
                                        money[0] = 0;
                                        jLabel2.setText("Player 1, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[0] = money[0] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos1 = curPos1 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[0] = money[0] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[0] = money[0] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[0] < 100) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[0] = money[0] - 100;
                            }

                        } else if (property[curPos1].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[0] < 200) {
                                money[0] = 0;
                                jLabel2.setText("Player 1, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[0] = money[0] - 200;
                            }

                        } else if (property[curPos1].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerOne();

                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos1].equals("Go")) {

                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos1] == 2) {//if Player 2 owns this, subtract rent
                                onePaysTwo();
                            } else if (owner[curPos1] == 3) {//if Player 3 owns this, subtract rent
                                onePaysThree();
                            } else if (owner[curPos1] == 4) {//if Player 4 owns this, subtract rent
                                onePaysFour();
                            } else if (owner[curPos1] == 0) {//if no one owns, give option to buy
                                jLabel2.setText("Would you like to buy " + property[curPos1] + " for $" + price[curPos1] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos1] == 1) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 2;//make it player 2's turn next time

                    } //PLAYER 2'S TURN
                    else if (playTurn == 2) {//if it's player 2's turn
                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos2].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[1] < 150) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[1] = money[1] - 150;
                                    money[0] = money[0] + 50;
                                    money[2] = money[2] + 50;
                                    money[3] = money[3] + 50;
                                    }
                                    break;
                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[1] < 15) {
                                        money[1] = 0;
                                        jLabel2.setText("Player 2, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[1] = money[1] - 15;
                                    }
                                    break;
                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos2 = curPos2 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[1] = money[1] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[1] = money[1] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[1] < 100) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 100;
                            }

                        } else if (property[curPos2].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[1] < 200) {
                                money[1] = 0;
                                jLabel2.setText("Player 2, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[1] = money[1] - 200;
                            }

                        } else if (property[curPos2].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerTwo();

                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos2].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos2] == 1) { //if Player 1 owns this, subtract rent
                                twoPaysOne();

                            } else if (owner[curPos2] == 3) { //if Player 3 owns this, subtract rent
                                twoPaysThree();

                            } else if (owner[curPos2] == 4) {
                                twoPaysFour();

                            } else if (owner[curPos2] == 0) {
                                //if no one owns, give option to buy
                                jLabel2.setText("Would you like to buy " + property[curPos2] + " for $" + price[curPos2] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos2] == 2) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }

                        playTurn = 3;//make it player 3's turn next time

                        //PLAYER 3'S TURN
                    } else if (playTurn == 3) {//if it's player 3's turn

                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos3].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[2] < 150) {
                                        money[2] = 0;
                                        jLabel2.setText("Player 3, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[2] = money[2] - 150;
                                    money[0] = money[0] + 50;
                                    money[1] = money[1] + 50;
                                    money[3] = money[3] + 50;
                                    }
                                    break;

                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[2] < 15) {
                                        money[2] = 0;
                                        jLabel2.setText("Player 3, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[2] = money[2] - 15;
                                    }

                                    break;

                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos3 = curPos3 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[2] = money[2] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[2] = money[2] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[2] < 100) {
                                money[2] = 0;
                                jLabel2.setText("Player 3, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[2] = money[2] - 100;
                            }

                        } else if (property[curPos3].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[2] < 200) {
                                money[2] = 0;
                                jLabel2.setText("Player 3, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[2] = money[2] - 200;
                            }

                        } else if (property[curPos3].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerThree();

                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos3].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos3] == 1) {//if player 1 owns this, subtract rent
                                threePaysOne();

                            } else if (owner[curPos3] == 2) { //if Player 2 owns this, subtract rent
                                threePaysTwo();

                            } else if (owner[curPos3] == 4) { //if Player 4 owns this, subtract rent
                                threePaysFour();

                            } else if (owner[curPos3] == 0) {//if no one owns, give option to buy

                                jLabel2.setText("Would you like to buy " + property[curPos3] + " for $" + price[curPos3] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos3] == 3) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 4;//make it player 4's turn next time

                    } //PLAYER 4'S TURN
                    else if (playTurn == 4) {//if it's player 4's turn

                        jLabel2.setText(" ");
                        jLabel9.setText(" ");

                        if (property[curPos4].equals("Chance")) {

                            chanceNum = (int) (Math.random() * 4) + 0;//choose one of the five chance options
                            jLabel2.setText("Chance: " + chance[chanceNum]);

                            switch (chanceNum) {
                                case 0:
                                    jLabel9.setText("You Have Been Elected Chairman of the Board. Pay Each Player $50.");
                                    if (money[3] < 150) {
                                        money[3] = 0;
                                        jLabel2.setText("Player 4, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                    money[3] = money[3] - 150;
                                    money[0] = money[0] + 50;
                                    money[1] = money[1] + 50;
                                    money[3] = money[3] + 50;
                                    }
                                    break;

                                case 1:
                                    jLabel9.setText("Pay Poor Tax of $15");
                                    if (money[3] < 15) {
                                        money[3] = 0;
                                        jLabel2.setText("Player 4, You Are Bankrupt.");
                                        endScreen();
                                    } else {
                                        money[3] = money[3] - 15;
                                    }

                                    break;

                                case 2:
                                    jLabel9.setText("Go Back Three Spaces.");
                                    curPos4 = curPos4 - 3;
                                    break;
                                case 3:
                                    jLabel9.setText("Bank Pays a Dividend of $50.");
                                    money[3] = money[3] + 50;
                                    break;
                                case 4:
                                    jLabel9.setText("Your Building and Loan Matures. Collect $150.");
                                    money[3] = money[3] + 150;
                                    break;
                                default:
                                    break;
                            }

                            jButton2.setVisible(false);

                        } else if (property[curPos4].equals("Luxury Tax")) {
                            jLabel2.setText("You Landed on Luxury Tax. You need to pay $100.");

                            jButton2.setVisible(false);

                            if (money[3] < 100) {
                                money[3] = 0;
                                jLabel2.setText("Player 4, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[3] = money[3] - 100;
                            }

                        } else if (property[curPos4].equals("Income Tax")) {
                            jLabel2.setText("You Landed on Income Tax. You need to pay $200.");

                            jButton2.setVisible(false);

                            if (money[3] < 200) {
                                money[3] = 0;
                                jLabel2.setText("Player 4, You Are Bankrupt.");
                                endScreen();
                            } else {
                                money[3] = money[3] - 200;
                            }

                        } else if (property[curPos4].equals("Community Chest")) {

                            chestNum = (int) (Math.random() * 4) + 0;//choose one of the five chest options
                            jLabel2.setText("Community Chest: " + comChest[chestNum]);

                            communityChestPlayerFour();

                            jButton2.setVisible(false);

                        } else if (property[curPos4].equals("Jail")) {
                            jLabel2.setText("You are at the jail.");
                            jButton2.setVisible(false);

                        } else if (property[curPos4].equals("Free Parking")) {
                            jLabel2.setText("You are at Free Parking.");
                            jButton2.setVisible(false);

                        } else if (property[curPos4].equals("Go")) {
                            jLabel2.setText("You are at Go.");
                            jButton2.setVisible(false);

                        } else {

                            if (owner[curPos4] == 1) {//if player 1 owns this
                                fourPaysOne();

                            } else if (owner[curPos4] == 2) { //if Player 2 owns this, subtract rent
                                fourPaysTwo();
                            } else if (owner[curPos4] == 3) { //if Player 3 owns this, subtract rent
                                fourPaysThree();

                            } else if (owner[curPos4] == 0) {//if no one owns, give option to buy
                                jLabel2.setText("Would you like to buy " + property[curPos4] + " for $" + price[curPos4] + "?");
                                jButton2.setVisible(true);

                            } else if (owner[curPos4] == 4) {
                                jLabel2.setText("You Own This");
                                jButton2.setVisible(false);
                            }
                        }
                        playTurn = 1;//make it player 1's turn next time
                    }

                    //CHANGE MONEY DISPLAY
                    jLabel4.setText("Player 1: " + String.valueOf(money[0]));
                    jLabel5.setText("Player 2: " + String.valueOf(money[1]));
                    jLabel6.setText("Player 3: " + String.valueOf(money[2]));
                    jLabel7.setText("Player 4: " + String.valueOf(money[3]));

                    //DRAW SPRITES
                    g.setColor(Color.blue); //draw player 1
                    g.fillOval(xC[curPos1], yC[curPos1], 10, 10);

                    g.setColor(Color.red); //draw player 2
                    g.fillOval(xC[curPos2] + 10, yC[curPos2], 10, 10);

                    g.setColor(Color.green);//draw player 3
                    g.fillOval(xC[curPos3], yC[curPos3] + 15, 10, 10);

                    g.setColor(Color.orange);//draw player 4
                    g.fillOval(xC[curPos4] + 5, yC[curPos4] + 10, 10, 10);

                    break;
                default:
                    break;
            }
            count = 1;
        }
        numTurn++;
        count = 0;

    }//GEN-LAST:event_jButton1ActionPerformed

    //METHODS
    public void hideAtBeginning() {
        jButton2.setVisible(false);

        jLabel3.setVisible(false);
        jLabel4.setVisible(false);
        jLabel5.setVisible(false);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);

        jLabel11.setVisible(false);
        jButton6.setVisible(false);
        jButton7.setVisible(false);
        jButton1.setVisible(false);
        jLabel9.setText(" ");
        jLabel2.setText(" ");
        jLabel10.setText(" ");
    }

    //UPDATE THE LIST OF PROPERTIES AND OWNERS
    public void list() {

        if (owner[1] != 0) {
            jLabel21.setText("Boardwalk:             Owned by Player " + owner[1]);//boardwalk
        } else {
            jLabel21.setText("Boardwalk:");
        }
        if (owner[3] != 0) {
            jLabel22.setText("Park Place:            Owned by Player " + owner[3]);//park place
        } else {
            jLabel22.setText("Park Place:");
        }
        if (owner[5] != 0) {
            jLabel23.setText("Short Line:            Owned by Player " + owner[5]);//short line
        } else {
            jLabel23.setText("Short Line:");
        }
        if (owner[6] != 0) {
            jLabel24.setText("Pennsylvania Avenue:   Owned by Player " + owner[6]);//pennsylvania avenue
        } else {
            jLabel24.setText("Pennsylvania Avenue:");
        }
        if (owner[8] != 0) {
            jLabel25.setText("North Carolina Avenue: Owned by Player " + owner[8]);//north carolina avenue
        } else {
            jLabel25.setText("North Carolina Avenue:");
        }
        if (owner[9] != 0) {
            jLabel26.setText("Pacific Avenue:        Owned by Player " + owner[9]);//pacific avenue
        } else {
            jLabel26.setText("Pacific Avenue:");
        }
        if (owner[11] != 0) {
            jLabel27.setText("Marvin Gardens:        Owned by Player " + owner[11]);//marvin gardens
        } else {
            jLabel27.setText("Marvin Gardens:");
        }
        if (owner[12] != 0) {
            jLabel28.setText("Water Works:           Owned by Player " + owner[12]);//water works
        } else {
            jLabel28.setText("Water Works:");
        }
        if (owner[13] != 0) {
            jLabel29.setText("Ventnor Avenue:        Owned by Player " + owner[13]);//ventnor avenue
        } else {
            jLabel29.setText("Ventnor Avenue:");
        }
        if (owner[14] != 0) {
            jLabel30.setText("Atlantic Avenue:       Owned by Player " + owner[14]);//atlantic avenue
        } else {
            jLabel30.setText("Atlantic Avenue:");
        }
        if (owner[15] != 0) {
            jLabel31.setText("B & O Railroad:        Owned by Player " + owner[15]);//b & o railroad
        } else {
            jLabel31.setText("B & O Railroad:");
        }
        if (owner[16] != 0) {
            jLabel32.setText("Illinois Avenue:       Owned by Player " + owner[16]);//illinois avenue
        } else {
            jLabel32.setText("Illinois Avenue:");
        }
        if (owner[17] != 0) {
            jLabel33.setText("Indiana Avenue:        Owned by Player " + owner[17]);//indiana avenue
        } else {
            jLabel33.setText("Indiana Avenue:");
        }
        if (owner[19] != 0) {
            jLabel34.setText("Kentucky Avenue:       Owned by Player " + owner[19]);//kentucky avenue
        } else {
            jLabel34.setText("Kentucky Avenue:");
        }
        if (owner[21] != 0) {
            jLabel35.setText("New York Avenue:       Owned by Player " + owner[21]);//new york avenue
        } else {
            jLabel35.setText("New York Avenue:");
        }
        if (owner[22] != 0) {
            jLabel36.setText("Tennessee Avenue:      Owned by Player " + owner[22]);//tennessee avenue
        } else {
            jLabel36.setText("Tennessee Avenue:");
        }
        if (owner[24] != 0) {
            jLabel37.setText("St. James Place:       Owned by Player " + owner[24]);//st. james place
        } else {
            jLabel37.setText("St. James Place:");
        }
        if (owner[25] != 0) {
            jLabel38.setText("Pennsylvania Railroad: Owned by Player " + owner[25]);//pennsylvania railroad
        } else {
            jLabel38.setText("Pennsylvania Railroad:");
        }
        if (owner[26] != 0) {
            jLabel39.setText("Virginia Avenue:       Owned by Player " + owner[26]);//virgina avenue
        } else {
            jLabel39.setText("Virgina Avenue:");
        }
        if (owner[27] != 0) {
            jLabel40.setText("States Avenue:         Owned by Player " + owner[27]);//states avenue
        } else {
            jLabel40.setText("States Avenue:");
        }
        if (owner[28] != 0) {
            jLabel41.setText("Electric Company:      Owned by Player " + owner[28]);//electric company
        } else {
            jLabel41.setText("Electric Company:");
        }
        if (owner[29] != 0) {
            jLabel42.setText("St. Charles Place:     Owned by Player " + owner[29]);//st. charles place
        } else {
            jLabel42.setText("St. Charles Place:");
        }
        if (owner[31] != 0) {
            jLabel43.setText("Connecticut Avenue:    Owned by Player " + owner[31]);//connecticut avenue
        } else {
            jLabel43.setText("Connecticut Avenue:");
        }
        if (owner[32] != 0) {
            jLabel44.setText("Vermont Avenue:        Owned by Player " + owner[32]);//vermont avenue
        } else {
            jLabel44.setText("Vermont Avenue:");
        }
        if (owner[34] != 0) {
            jLabel45.setText("Oriental Avenue:       Owned by Player " + owner[34]);//oriental avenue
        } else {
            jLabel45.setText("Oriental Avenue:");
        }
        if (owner[35] != 0) {
            jLabel46.setText("Reading Railroad:      Owned by Player " + owner[35]);//reading railroad
        } else {
            jLabel46.setText("Reading Railroad:");
        }
        if (owner[37] != 0) {
            jLabel47.setText("Baltic Avenue:         Owned by Player " + owner[37]);//baltic avenue
        } else {
            jLabel47.setText("Baltic Avenue:");
        }
        if (owner[39] != 0) {
            jLabel48.setText("Mediterranean Avenue:  Owned by Player " + owner[39]);//mediterranean avenue
        } else {
            jLabel48.setText("Mediterranean Avenue:");
        }

    }

    public void endScreen() { //ask players if they want to play again
        jLabel11.setVisible(true);
        jButton6.setVisible(true);
        jButton7.setVisible(true);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/No Roll.png")));
    }

    public void diceVisual() {//illustrate the dice roll
        switch (diceNum) {
            case 1:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/One.png")));
                break;
            case 2:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Two.png")));
                break;
            case 3:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Three.png")));
                break;
            case 4:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Four.png")));
                break;
            case 5:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Five.png")));
                break;
            case 6:
                jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/my/movingaroundscreen/Six.png")));
                break;
            default:
                break;
        }
    }

    //PAY OTHER PLAYERS WHAT THEY HAVE METHODS
    public void onePaysTwo() { //if player 1 doesn't have enough money to pay player 2

        jLabel9.setText("Player 1 Needs to Pay a Rent of $" + rent[curPos1] + " to Player 2.");
        jButton2.setVisible(false);
        if (money[0] < rent[curPos1]) {//if player doesn't have enough money to pay rent
            money[1] = money[1] + money[0];
            money[0] = 0;
            jLabel2.setText("Player 1, You Are Bankrupt.");
            endScreen();
        } else {
            money[0] = money[0] - rent[curPos1];//player 1 pays rent
            money[1] = money[1] + rent[curPos1];//to player 2
        }
    }

    public void onePaysThree() { //if player 1 doesn't have enough money to pay player 3

        jLabel9.setText("Player 1 Needs to Pay a Rent of $" + rent[curPos1] + " to Player 3.");
        jButton2.setVisible(false);
        if (money[0] < rent[curPos1]) {//if player doesn't have enough money to pay rent
            money[2] = money[2] + money[0];
            money[0] = 0;
            jLabel2.setText("Player 1, You Are Bankrupt.");
            endScreen();
        } else {
            money[0] = money[0] - rent[curPos1];//player 1 pays rent
            money[2] = money[2] + rent[curPos1];//to player 3
        }

    }

    public void onePaysFour() {

        jLabel9.setText("Player 1 Needs to Pay a Rent of $" + rent[curPos1] + " to Player 4.");
        jButton2.setVisible(false);
        if (money[0] < rent[curPos1]) {
            money[3] = money[3] + money[0];
            money[0] = 0;
            jLabel2.setText("Player 1, You Are Bankrupt.");
            endScreen();
        } else {
            money[0] = money[0] - rent[curPos1];//player 2 pays rent
            money[3] = money[3] + rent[curPos1];//to player 4
        }

    }

    public void twoPaysOne() { //if player 2 doesn't have enough money to pay player 1

        jLabel9.setText("Player 2 Needs to Pay a Rent of $" + rent[curPos2] + " to Player 1.");
        jButton2.setVisible(false);
        if (money[1] < rent[curPos2]) {
            money[0] = money[0] + money[1];
            money[1] = 0;
            jLabel2.setText("Player 2, You Are Bankrupt.");
            endScreen();
        } else {
            money[1] = money[1] - rent[curPos2];//player 2 pays rent
            money[0] = money[0] + rent[curPos2];//to player 1
        }
    }

    public void twoPaysThree() { //if player 2 doesn't have enough money to pay player 3

        jLabel9.setText("Player 2 Needs to Pay a Rent of $" + rent[curPos2] + " to Player 3.");
        jButton2.setVisible(false);
        if (money[1] < rent[curPos2]) {
            money[2] = money[2] + money[1];
            money[1] = 0;
            jLabel2.setText("Player 2, You Are Bankrupt.");
            endScreen();
        } else {
            money[1] = money[1] - rent[curPos2];//player 2 pays rent
            money[2] = money[2] + rent[curPos2];//to player 3
        }
    }

    public void twoPaysFour() {

        jLabel9.setText("Player 2 Needs to Pay a Rent of $" + rent[curPos2] + " to Player 4.");
        jButton2.setVisible(false);
        if (money[1] < rent[curPos2]) {
            money[3] = money[3] + money[1];
            money[1] = 0;
            jLabel2.setText("Player 2, You Are Bankrupt.");
            endScreen();
        } else {
            money[1] = money[1] - rent[curPos2];//player 2 pays rent
            money[3] = money[3] + rent[curPos2];//to player 4
        }

    }

    public void threePaysOne() {//if player 3 doesn't have enough money to pay player 1

        jLabel9.setText("Player 3 Needs to Pay a Rent of $" + rent[curPos3] + " to Player 1.");
        jButton2.setVisible(false);
        if (money[2] < rent[curPos3]) {
            money[0] = money[0] + money[2];
            money[2] = 0;
            jLabel2.setText("Player 3, You Are Bankrupt.");
            endScreen();
        } else {
            money[2] = money[2] - rent[curPos3];//player 3 pays rent
            money[0] = money[0] + rent[curPos3];//to player 1
        }

    }

    public void threePaysTwo() {//if player 3 doesn't have enough money to pay player 2

        jLabel9.setText("Player 3 Needs to Pay a Rent of $" + rent[curPos3] + " to Player 2.");
        jButton2.setVisible(false);
        if (money[2] < rent[curPos3]) {
            money[1] = money[1] + money[2];
            money[2] = 0;
            jLabel2.setText("Player 3, You Are Bankrupt.");
            endScreen();
        } else {
            money[2] = money[2] - rent[curPos3];//player 3 pays rent
            money[1] = money[1] + rent[curPos3];//to player 2
        }
    }

    public void threePaysFour() {

        jLabel9.setText("Player 3 Needs to Pay a Rent of $" + rent[curPos3] + " to Player 4.");
        jButton2.setVisible(false);
        if (money[2] < rent[curPos3]) {
            money[3] = money[3] + money[2];
            money[2] = 0;
            jLabel2.setText("Player 3, You Are Bankrupt.");
            endScreen();
        } else {
            money[2] = money[2] - rent[curPos3];//player 3 pays rent
            money[3] = money[3] + rent[curPos3];//to player 4
        }
    }

    public void fourPaysOne() {

        jLabel9.setText("Player 4 Needs to Pay a Rent of $" + rent[curPos4] + " to Player 1.");
        jButton2.setVisible(false);
        if (money[3] < rent[curPos4]) {
            money[0] = money[0] + money[3];
            money[3] = 0;
            jLabel2.setText("Player 4, You Are Bankrupt.");
            endScreen();
        } else {
            money[3] = money[3] - rent[curPos4];//player 4 pays rent
            money[0] = money[0] + rent[curPos4];//to player 1
        }

    }

    public void fourPaysTwo() {
        jLabel9.setText("Player 4 Needs to Pay a Rent of $" + rent[curPos4] + " to Player 2.");
        jButton2.setVisible(false);
        if (money[3] < rent[curPos4]) {
            money[1] = money[1] + money[3];
            money[3] = 0;
            jLabel2.setText("Player 4, You Are Bankrupt.");
            endScreen();
        } else {
            money[3] = money[3] - rent[curPos4];//player 4 pays rent
            money[1] = money[1] + rent[curPos4];//to player 2
        }
    }

    public void fourPaysThree() {
        jLabel9.setText("Player 4 Needs to Pay a Rent of $" + rent[curPos4] + " to Player 3.");
        jButton2.setVisible(false);
        if (money[3] < rent[curPos4]) {
            money[2] = money[2] + money[3];
            money[3] = 0;
            jLabel2.setText("Player 4, You Are Bankrupt.");
            endScreen();
        } else {
            money[3] = money[3] - rent[curPos4];//player 4 pays rent
            money[2] = money[2] + rent[curPos4];//to player 3
        }
    }

    public void communityChestPlayerOne() {
        switch (chestNum) {
            case 0:
                jLabel9.setText("Bank Error in Your Favour. Collect $200.");
                money[0] = money[0] + 200;
                break;

            case 1:
                jLabel9.setText("Doctor's Fees. Pay $50.");

                if (money[0] < 50) {
                    money[0] = 0;
                    jLabel2.setText("Player 1, You Are Bankrupt.");
                    endScreen();

                } else {
                    money[0] = money[0] - 50;
                }
                break;

            case 2:
                jLabel9.setText("From Sale of Stock You Get $50.");
                money[0] = money[0] + 50;
                break;

            case 3:
                jLabel9.setText("Holiday Fund Matures. Receive $100.");
                money[0] = money[0] + 100;
                break;

            case 4:
                jLabel9.setText("Income Tax Refund. Collect $20.");
                money[0] = money[0] + 20;
                break;
            default:
                break;
        }
    }

    public void communityChestPlayerTwo() {
        switch (chestNum) {
            case 0:
                jLabel9.setText("Bank Error in Your Favour. Collect $200.");
                money[1] = money[1] + 200;
                break;

            case 1:
                jLabel9.setText("Doctor's Fees. Pay $50.");

                if (money[1] < 50) {
                    money[1] = 0;
                    jLabel2.setText("Player 2, You Are Bankrupt.");
                    endScreen();

                } else {
                    money[1] = money[1] - 50;
                }
                break;

            case 2:
                jLabel9.setText("From Sale of Stock You Get $50.");
                money[1] = money[1] + 50;
                break;

            case 3:
                jLabel9.setText("Holiday Fund Matures. Receive $100.");
                money[1] = money[1] + 100;
                break;

            case 4:
                jLabel9.setText("Income Tax Refund. Collect $20.");
                money[1] = money[1] + 20;
                break;

            default:
                break;
        }
    }

    public void communityChestPlayerThree() {
        switch (chestNum) {
            case 0:
                jLabel9.setText("Bank Error in Your Favour. Collect $200.");
                money[2] = money[2] + 200;
                break;

            case 1:
                jLabel9.setText("Doctor's Fees. Pay $50.");

                if (money[2] < 50) {
                    money[2] = 0;
                    jLabel2.setText("Player 3, You Are Bankrupt.");
                    endScreen();
                } else {
                    money[2] = money[2] - 50;
                }

                break;

            case 2:
                jLabel9.setText("From Sale of Stock You Get $50.");
                money[2] = money[2] + 50;
                break;

            case 3:
                jLabel9.setText("Holiday Fund Matures. Receive $100.");
                money[2] = money[2] + 100;
                break;

            case 4:
                jLabel9.setText("Income Tax Refund. Collect $20.");
                money[2] = money[2] + 20;
                break;

            default:
                break;
        }
    }

    public void communityChestPlayerFour() {
        switch (chestNum) {
            case 0:
                jLabel9.setText("Bank Error in Your Favour. Collect $200.");
                money[3] = money[3] + 200;
                break;

            case 1:
                jLabel9.setText("Doctor's Fees. Pay $50.");

                if (money[3] < 50) {
                    money[3] = 0;
                    jLabel2.setText("Player 4, You Are Bankrupt.");
                    endScreen();
                } else {
                    money[3] = money[3] - 50;
                }

                break;

            case 2:
                jLabel9.setText("From Sale of Stock You Get $50.");
                money[3] = money[3] + 50;
                break;

            case 3:
                jLabel9.setText("Holiday Fund Matures. Receive $100.");
                money[3] = money[3] + 100;
                break;

            case 4:
                jLabel9.setText("Income Tax Refund. Collect $20.");
                money[3] = money[3] + 20;
                break;

            default:
                break;
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovingAroundScreenUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovingAroundScreenUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovingAroundScreenUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovingAroundScreenUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MovingAroundScreenUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

}
